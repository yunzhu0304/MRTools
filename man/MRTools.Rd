% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MRTools.R
\name{MRTools}
\alias{MRTools}
\title{Construct and Prune Master Regulator Network}
\usage{
MRTools(
  DEG_data,
  GeneXplain_file,
  GXP_source,
  GXP_target,
  species = c("Homo", "Mm", "Rn"),
  ...
)
}
\arguments{
\item{DEG_data}{A \code{data.frame} created by \code{\link{DEG_fit}},
containing standardized differential expression results
(\code{GeneSymbol}, \code{logFC}, \code{pval}, \code{change}).}

\item{GeneXplain_file}{A \code{data.frame} containing a source-target
interaction network downloaded from \code{geneXplain}.
Must include two columns specifying source and target genes.}

\item{GXP_source}{A \code{character} string giving the column name of
the source gene in \code{GeneXplain_file}.}

\item{GXP_target}{A \code{character} string giving the column name of
the target gene in \code{GeneXplain_file}.}

\item{species}{A \code{character} string specifying the species for
case conversion and TF annotation. Must be one of \code{"Homo"},
\code{"Mm"}, or \code{"Rn"}.}

\item{...}{Additional arguments (currently not used).}
}
\value{
An object of class \code{MRToolsResult}, which is a list with:
\itemize{
\item \code{MR_list} The pruned master regulator network
(data.frame with Source and Target).
\item \code{MRgene_property} A data.frame of regulators present in
the pruned network, annotated with differential expression
properties and TF status.
}
}
\description{
This function integrates differential expression data (DEG) with
master regulator networks exported from \code{geneXplain}.
It performs standardized gene name conversion, network pruning
based on DEG status, and annotation of transcription factors (TFs).
}
\details{
The pruning procedure iteratively removes targets that are not
differentially expressed or are stable, unless they serve as TFs
within the network. The process repeats until the network reaches
a stable structure (no further changes in row count).
}
\examples{
\dontrun{
# Load demo data
data("DEG_demo")
data("GeneXplain_source_target")

# Format DEG list
DEG_list <- DEG_fit(
  data        = DEG_demo,
  GeneSymbol  = "GeneSymbol",
  logFC_from  = "logFC",
  Pvalue_from = "adj.P.Val"
)

# Run MRTools analysis
MRTools_test_result <- MRTools(
  DEG_data       = DEG_list,
  GeneXplain_file= GeneXplain_source_target,
  GXP_source     = "Source",
  GXP_target     = "Target",
  species        = "Rn"
)

# Inspect results
head(MRTools_test_result$MR_list)
head(MRTools_test_result$MRgene_property)

# Save results to CSV

openxlsx::write.xlsx(MRTools_test_result$MR_list,
file = "MRTools_network.xlsx")

openxlsx::write.xlsx(MRTools_test_result$MRgene_property,
file = "MRTools_gene_property.xlsx")


}

}
